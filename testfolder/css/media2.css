
 *{             /*ко всем элементам, чтобы убрать отступы, которые назначит браузер по умолчанию */
    padding: 0;
    margin: 0;
   }
   html {
    font-size: 16px;/* зададим основной размер шрифта, для того,чтобы пользоваться относительной единицей rem */
   }
   body{
    overflow-x: hidden; /* скроем контент, превышающий ширину окна браузера */
    font-family: Helvetica, Tahoma, Verdana, sans-serif;/* устанавливаем основной шрифт контента-системный - это позволит быстрее загрузить страницу */
    font-size: 1rem;/* Единица rem задаёт размер относительно размера шрифта элемента <html>по умолч. 1rem = 16px */
    color: rgb(75, 75, 75);
   }
   h1,h2,h3,a{                   /* шрифт для заголовков и ссылок будет 'Bitter', который мы подключили с помощью тега <link> */
    font-family: ‘Bitter’, serif;
    font-weight: 400;
    color: rgb(105, 105, 105);
   }
   
 /* для основного контейнера будем использовать фиксировано-резиновую верстку*/
.container{              
    width: 100vw;       /*устанавливаем основную ширину равной ширине видимой части окна браузера*/
    min-width: 320px;   /* устанавливаем мин. ширину, до которой можно сжимать контейнер, если ширина будет меньше - появится горизонтальный скролл */
    max-width: 1200px;  /* устанавливаем максимальную ширину, до которой можно расширять контейнер, если ширина устройства будет больше - по бокам появятсяотступы */
    margin: auto;       /* для того, чтобы контейнер находился всегдапо центру по горизонтали указываем значения для внешних отступов */
    min-height: 100vh;  /* в случае, если контента будет мало, чтобы страница полностью заполнила всю высоту окна браузера, устанавливаем минимальную высоту */
    height: auto;      /* в случае, если контента будет много, чтобы появился вертикальный скролл, устанавливаем значение высоты равной содержимому */
    display: flex;      /* для более простого расположения элементовна странице, воспользуемся технологией flexBox */
    flex-direction: column; /* направление основной оси меняем на вертикальное */
   }
   /* каждому элементу контейнера будем устанавливать фоновой цвет, чтобы было нагляднее*/
header{
    
     flex-basis: 10vh; /* зададим размер header по основной оси т.е. 10%*/
     display: flex;/* элементы шапки сайта располагаются слева на право */
     justify-content: space-between;/* между элементами задаем отступ */
     padding: 0 3vw;/* отступ справа и слева зависит от ширины окна браузера */                                   
    }
    header h1{     
     align-self: center; /* выравниваем содержимое дочернего элемента( h1) по вертикали */
    }
    header nav{
     align-self: center;/* выравниваем содержимое дочернего элемента по вертикали */
     display: flex;/* для того, чтобы легко расположить ссылки,воспользуемся снова технологией flexBox */
    }

    /* стилевое оформление ссылок основного меню */
 header nav a{
     display: block;    /*блочные элементы*/
     margin-left: 2vw;   /* отступ внешний 2% от род.элемента*/
     padding: 0.5vw 1vw; /* отступ внутренний*/
     font-size: 1.1rem;
     text-decoration: none;/*Убираем подчеркивание*/
     border: 2px solid transparent; /*рамка невидимая в 2 пикселя шириной*/
    }
header nav a:hover,header nav a.active{
 border-bottom: 2px solid rgba(105, 105, 105, 0.5);/* при наведении курсора нижняя граница серым цветом*/
}
main{               /* main - основной элемент страницы является одновременно и flex-родителем и flex-контейнером */
 flex: 1 1 auto;    /* чтобы заполнять все пространство по основной оси основным элементом прописываем свойство flex */
 display: flex;   /* дочерние элементы располагаются слева на право */
 justify-content: space-between;
 padding-top: 2vh;
}
main>aside{    
 flex-basis: 20%; /* зададим размер левой части по основной оси в процентах*/
}
main>aside>div{
 padding: 3% 10%;/* задаем отступы в процентах от ширины родительского элемента*/
}
main>aside>div>*{
 border-bottom: 2px solid rgba(105, 105, 105, 0.3);
 margin-bottom: 2vh;
}
main>aside>div>h3{
 text-transform: capitalize;/*Первый символ каждого слова в предложении будет заглавным. Остальные символы свой вид не меняют*/
}
.news{
    font-size: 0.9rem;
    padding-bottom: 5px;
   }
   .news>*{
    display: block;
    padding-bottom: 7px;
   }
   .news>h2>a{
    font-size: 1.1rem;
    text-decoration: none;
   }
   .news>strong,.news>em{
    color: rgb(155, 155, 155);
    font-size: 0.7rem;
   }
   .news>strong{
    text-transform: uppercase;/* в классе ньюс между тегом strong текст заглавными буквами*/
   }
   main>section{
    flex: 1 1 55%;/* чтобы заполнять все пространство по основной оси основным элементом прописываем свойство flex */
   }
   main>section>article{
    padding: 1% 5%;
   }
   main>section>article>*{
    display: block;
    padding-bottom: 1.5vh;
   }
   main>section>article>h2{
    text-transform: uppercase;
   }
   main>section>article>em{
    color: rgb(155, 155, 155);
    font-size: 0.9rem;
   }
   main>section>article>img{
    width: 100%;/* задаем изображению ширину 100% от ширины родительского элемента */
   }
   .social{
    text-align: right;
   }
   /* социальные сети подключаем используя изображение,
    состоящее из трех иконок социальных сетей.
    В этом случае загружается одно изображение вместо
    трех и, следовательно, скорость загрузки сайта
    выше. */
   .social>a{
    display: inline-block;/* меняем отображение ссылки со строчного на строчно-блочный */
    width:32px; /* размер ссылки равен размеру одной иконки */
    height: 32px;/* в случае, если путь к изображению не содержит пробелов или специальных символов, можно прописывать его без кавычек */
    background-image: url(../icons/vippng.com-instagram-vector-png-828935.png);
    background-repeat: no-repeat;/* устанавливаем размер так, чтобы отображалась только одна иконка */
    background-size: 300%;
    opacity: 0.7;
}
/* изменяем позиционирование фонового изображения
 в соответствии с классом для соцсети */
.social>a.fb{
 background-position: 0 0;
}
.social>a.tw{
 background-position: 50% 0;
}
.social>a.inst{
 background-position: 100% 0;
}
main>section+aside{
 /* зададим размер левой части по основной оси
 в процентах*/
 flex-basis: 20%;
}
main>section+aside figure *{
 display: block;
 padding-bottom: 7px;
}
main>section+aside figure img{
 opacity: 0.5;
 width: 32px;
 height:32px;
}
main>section+aside figure figcaption{
    font-size: 0.9rem;
   }
   main>section+aside figure figcaption em{
    color: rgb(155, 155, 155);
    font-size: 0.7rem;
   }
   footer{
    /*зададим размер footer по основной оси*/
    flex-basis: 5vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
   }
   /*ДЛЯ ПЛАНШЕТОВ создаем запрос для экранов с максимальной шириной 960px и меньше */
@media screen and (max-width:960px){
    main>section+aside{
    display: none;/* спрячем правый элемент на всех устройствах, с шириной 960px и меньше */
    }
    
    main>aside{
    flex-basis: 30%;/* зададим размер левой части по основной оси в процентах */
    }
    main>section{
    flex-basis: 70%;/* зададим размер центральной части по основной оси в процентах*/
    }
   }
   /* ДЛЯ СМАРТФОНОВ запрос для экранов с максимальной шириной 570px
    и меньше*/
   @media screen and (max-width:570px){
    header{
    flex-basis: auto;/*размер на всю ширину*/
    flex-direction: column;/* меняем направление основной оси шапкисайта */
    
    }
    main{
    flex-direction: column; /* меняем направление основной оси элемента отображающего основной контент */
    }
    main>aside{
    flex-basis: 20vh;/* зададим размер видимому элементу aside по основной оси */
    }
    main>aside>div {
        padding: 3% 5%;
        }
    main>section{
        flex-basis: auto;/* зададим размер основному контенту  по основной оси*/
        order:-1;/* изменим порядок отображения элементов так, чтобы контент находился выше */
        }
       }