JavaScript (/ˈdʒɑːvɑːˌskrɪpt/; аббр. JS /ˈdʒeɪ.ɛs./) — мультипарадигменный язык программирования.
 Поддерживает объектно- ориентированный, императивный и функциональный стили. Является реализацией спецификации 
ECMAScript (ECMAScript — это встраиваемый расширяемый не имеющий средств ввода-вывода язык программирования, 
используемый в качестве основы для построения других скриптовых языков. Стандартизирован международной организацией ECMA в спецификации ECMA-262. 
Расширения языка: JavaScript, JScript и ActionScript.) 
 

JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. 
Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам[8]. 

Основные архитектурные черты:  

динамическая типизация, 

 слабая типизация,  

автоматическое управление памятью, 

 прототипное программирование,  

функции как объекты первого класса. 

На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java. 
Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке. 

Содержание 

Создание JavaScript 

 

Название «JavaScript» является зарегистрированным товарным знаком корпорации Oracle в США. 

Самая первая реализация JavaScript была создана Бренданом Эйхом (Brendan Eich) в компании Netscape, 
и с тех пор обновляется, чтобы соответствовать ECMA-262 Edition 5 и более поздним версиям. 

Перед Бренданом Эйхом, нанятым в компанию Netscape 4 апреля 1995 года, была поставлена задача внедрить язык
 программирования Scheme или что-то похожее в браузер Netscape. Поскольку требования были размыты, Эйха перевели в группу, 
ответственную за серверные продукты, где он проработал месяц, занимаясь улучшением протокола HTTP. В мае разработчик был переброшен обратно,
 в команду, занимающуюся клиентской частью (браузером), где он немедленно начал разрабатывать концепцию нового языка программирования, 
встраиваемый в HTML-код страницы. 

Помимо Брендана Эйха, в разработке участвовали ооснователь Netscape Communications Марк Андрессен и сооснователь Sun Microsystems Билл Джой:
 чтобы успеть закончить работы над языком к релизу браузера, компании заключили соглашение о сотрудничестве в разработке.
 Они ставили перед собой цель обеспечить «язык для склеивания» составляющих частей веб-ресурса: изображений, плагинов, 
Java-апплетов, который был бы удобен для веб-дизайнеров и программистов, не обладающих высокой квалификацией. 

Первоначально язык назывался Mocha, затем он был переименован в LiveScript и предназначался как для программирования на стороне клиента, 
так и для программирования на стороне сервера (там он должен был называться LiveWire). На синтаксис оказали влияние языки Си и Java, и,
 поскольку Java в то время было модным словом, 4 декабря 1995 года LiveScript переименовали в JavaScript. В 1996 году компания Microsoft
 выпустила аналог языка JavaScript, названный JScript. Анонсирован этот язык был 18 июля 1996 года. Первым браузером, поддерживающим эту 
реализацию, был Internet Explorer 3.0. 

По инициативе компании Netscape была проведена стандартизация языка ассоциацией ECMA. Стандартизированная версия имеет название ECMAScript,
 описывается стандартом ECMA-262. Первой версии спецификации соответствовал JavaScript версии 1.1, а также языки JScript и ScriptEasy. 

JavaScript является самым популярным языком программирования, используемым для разработки веб-приложений на стороне клиента. 

Возможности языка. 

JavaScript является объектно-ориентированным языком, но используемое в языке прототипирование обуславливает отличия в работе
 с объектами по сравнению с традиционными класс-ориентированными языками. Кроме того, JavaScript имеет ряд свойств, присущих 
функциональным языкам — функции как объекты первого класса, объекты как списки, карринг, анонимные функции, замыкания — что придаёт языку
 дополнительную гибкость. 

Несмотря на схожий с Си синтаксис, JavaScript по сравнению с языком Си имеет коренные отличия: 

объекты с возможностью интроспекции; 

функции как объекты первого класса; 

автоматическое приведение типов; 

автоматическая сборка мусора; 

анонимные функции. 

В языке отсутствуют такие полезные вещи, как: 

стандартная библиотека: в частности, отсутствует интерфейс программирования приложений по работе с файловой системой,
 управлению потоками ввода-вывода, базовых типов для бинарных данных; 

стандартные интерфейсы к веб-серверам и базам данных; 

система управления пакетами, которая бы отслеживала зависимости и автоматически устанавливала их. 

 

Синтаксис языка JavaScript во многом напоминает синтаксис Си и Java, семантически же язык гораздо ближе к Self, Smalltalk или даже Лиспу. 

В JavaScript: 

все идентификаторы регистрозависимы, 

в названиях переменных можно использовать буквы, подчёркивание, символ доллара, арабские цифры, 

названия переменных не могут начинаться с цифры, 

для оформления однострочных комментариев используются //, многострочные и внутристрочные комментарии начинаются с /* и заканчиваются */. 

3.Структура языка 

Структурно JavaScript можно представить в виде объединения трёх чётко различимых друг от друга частей: 

ядро (ECMAScript), 

объектная модель браузера (Browser Object Model или BOM), 

объектная модель документа (Document Object Model или DOM). 

ECMAScript не является браузерным языком и в нём не определяются методы ввода и вывода информации. 
Это, скорее, основа для построения скриптовых языков. Спецификация ECMAScript описывает типы данных, инструкции, ключевые и 
зарезервированные слова, операторы, объекты, регулярные выражения, не ограничивая авторов производных языков в расширении их новыми составляющими. 

Объектная модель браузера — браузер-специфичная часть языка, являющаяся прослойкой между ядром и объектной моделью документа. 
Основное предназначение объектной модели браузера — управление окнами браузера и обеспечение их взаимодействия. Каждое из окон
 браузера представляется объектом window, центральным объектом DOM. Объектная модель браузера на данный момент не стандартизирована. 

Помимо управления окнами, в рамках объектной модели браузера, браузерами обычно обеспечивается поддержка следующих сущностей: 

управление фреймами, 

поддержка задержки в исполнении кода и зацикливания с задержкой, 

системные диалоги, 

управление адресом открытой страницы, 

управление информацией о браузере, 

управление информацией о параметрах монитора, 

ограниченное управление историей просмотра страниц, 

поддержка работы с HTTP cookie. 

Объектная модель документа — интерфейс программирования приложений для HTML и XML-документов[52]. Согласно DOM, 
документ (например, веб-страница) может быть представлен в виде дерева объектов, обладающих рядом свойств, которые позволяют производить 
с ним различные манипуляции: 

генерация и добавление узлов, 

получение узлов, 

изменение узлов, 

изменение связей между узлами, 

удаление узлов. 

4.Встраивание в веб-страницы. 

1.Расположение внутри страницы. 

Для добавления JavaScript-кода на страницу можно использовать теги <script></script>, которые рекомендуется, но не обязательно, 
помещать внутри контейнера <head>. Контейнеров <script> в одном документе может быть сколько угодно. Атрибут type="text/javascript" 
указывать необязательно, данное значение используется по умолчанию. 

Скрипт, выводящий модальное окно с классической надписью «Hello, World!» внутри браузера: 

<script type="application/javascript">  alert('Hello, World!');</script> 

2.Расположение внутри тега 

Спецификация HTML описывает набор атрибутов, используемых для задания обработчиков событий. Пример использования: 

<a href="delete.php" onclick="return confirm('Вы уверены?'); return false;">  Удалить</a> 

В приведённом примере при нажатии на ссылку функция confirm('Вы уверены?'); вызывает модальное окно с надписью «Вы уверены?», 
а return false; блокирует переход по ссылке. Разумеется, этот код будет работать только если в браузере есть и включена поддержка JavaScript, 
иначе переход по ссылке произойдёт без предупреждения. 

Использование кода JavaScript в контексте разметки страницы расценивается в рамках ненавязчивого JavaScript как плохая практика.
 Аналогом (при условии снабжения ссылки идентификатором alertLink) 

<a href="delete.php" id="alertLink">  Удалить</a> 

приведённого примера может являться, например, следующий фрагмент JavaScript: 

window.onload = function() {   
 var linkWithAlert = document.getElementById("alertLink"); 
  linkWithAlert.onclick = function()
 {    return confirm('Вы уверены?');     };}; 

3.Вынесение в отдельный файл 

Есть и третья возможность подключения JavaScript — написать скрипт в отдельном файле, а потом подключить его с помощью конструкции 

<body>  <script type="application/javascript" src="http://Путь_к_файлу_со_скриптом">  </script></body> 

Атрибуты элемента script. 

Элемент script, широко используемый для подключения к странице JavaScript, имеет несколько атрибутов. 

Необязательный атрибут type для указания MIME-типа содержимого. 

необязательный атрибут src, принимающий в качестве значения адрес к файлу со скриптом. 

необязательный атрибут charset, используемый вместе с src для указания используемой кодировки внешнего файла. 

необязательный атрибут defer указывает, что получение скрипта происходит асинхронно, но выполнение следует отложить до тех пор, 
пока страница не будет загружена целиком. 

необязательный атрибут async указывает, что получение скрипта происходит асинхронно, а выполнение будет произведено сразу по завершении скачивания.
 Очерёдность выполнения скриптов не гарантируется. 

 

Библиотека JavaScript 

Для обеспечения высокого уровня абстракции и достижения приемлемой степени кросс-браузерности при разработке веб-приложений 
используются библиотеки JavaScript. Они представляют собой набор многократно используемых объектов и функций. 
Среди известных JavaScript библиотек можно отметить React.js, Vue.js, Ember.js, Adobe Spry, AngularJS, SvelteJS, Dojo, Extjs,
 jQuery, Mootools, Prototype, Qooxdoo, Underscore и Node.js. 

На сегодняшний день поддержку JavaScript обеспечивают современные версии всех наиболее часто используемых браузеров. 
В Internet Explorer, Opera, Mozilla Firefox, Safari, Google Chrome, имеется полная поддержка третьей редакции ECMA-262. 
При этом в Mozilla Firefox предпринята попытка осуществления поддержки четвёртой редакции спецификации, а первым браузером,
 в котором появилась неполная поддержка спецификации 3.1, явился Internet Explorer 8. 

 